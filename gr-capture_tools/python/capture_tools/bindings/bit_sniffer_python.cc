/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(bit_sniffer.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(6eef08489b407669f434248c12353858)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/capture_tools/bit_sniffer.h>
// pydoc.h is automatically generated in the build directory
#include <bit_sniffer_pydoc.h>

void bind_bit_sniffer(py::module& m)
{

    using bit_sniffer    = ::gr::capture_tools::bit_sniffer;


    py::class_<bit_sniffer, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<bit_sniffer>>(m, "bit_sniffer", D(bit_sniffer))

        .def(py::init(&bit_sniffer::make),
           py::arg("fade_out") = 200,
           py::arg("hexadecimal") = 0,
           py::arg("offset") = 0,
           py::arg("bits_per_word") = 8,
           py::arg("lsb") = 0,
           py::arg("parity") = 0,
           py::arg("ascii") = 0,
           py::arg("binary") = 1,
           py::arg("special") = 0,
           py::arg("scroll") = 0,
           D(bit_sniffer,make)
        )
        




        
        .def("set_fade_out",&bit_sniffer::set_fade_out,       
            py::arg("arg0"),
            D(bit_sniffer,set_fade_out)
        )


        
        .def("set_hexadecimal",&bit_sniffer::set_hexadecimal,       
            py::arg("arg0"),
            D(bit_sniffer,set_hexadecimal)
        )


        
        .def("set_offset",&bit_sniffer::set_offset,       
            py::arg("arg0"),
            D(bit_sniffer,set_offset)
        )


        
        .def("set_bits_per_word",&bit_sniffer::set_bits_per_word,       
            py::arg("arg0"),
            D(bit_sniffer,set_bits_per_word)
        )


        
        .def("set_lsb",&bit_sniffer::set_lsb,       
            py::arg("arg0"),
            D(bit_sniffer,set_lsb)
        )


        
        .def("set_parity",&bit_sniffer::set_parity,       
            py::arg("arg0"),
            D(bit_sniffer,set_parity)
        )


        
        .def("set_ascii",&bit_sniffer::set_ascii,       
            py::arg("arg0"),
            D(bit_sniffer,set_ascii)
        )


        
        .def("set_binary",&bit_sniffer::set_binary,       
            py::arg("arg0"),
            D(bit_sniffer,set_binary)
        )


        
        .def("set_special",&bit_sniffer::set_special,       
            py::arg("arg0"),
            D(bit_sniffer,set_special)
        )


        
        .def("set_scroll",&bit_sniffer::set_scroll,       
            py::arg("arg0"),
            D(bit_sniffer,set_scroll)
        )


        
        .def("set_invert",&bit_sniffer::set_invert,       
            py::arg("arg0"),
            D(bit_sniffer,set_invert)
        )


        
        .def("set_info",&bit_sniffer::set_info,       
            py::arg("arg0"),
            D(bit_sniffer,set_info)
        )


        
        .def("set_show_magnitude",&bit_sniffer::set_show_magnitude,       
            py::arg("arg0"),
            D(bit_sniffer,set_show_magnitude)
        )


        
        .def("set_output",&bit_sniffer::set_output,       
            py::arg("filename"),
            D(bit_sniffer,set_output)
        )


        
        .def("set_diff",&bit_sniffer::set_diff,       
            py::arg("val"),
            D(bit_sniffer,set_diff)
        )


        
        .def("set_bitstuff",&bit_sniffer::set_bitstuff,       
            py::arg("val"),
            D(bit_sniffer,set_bitstuff)
        )

        ;




}








