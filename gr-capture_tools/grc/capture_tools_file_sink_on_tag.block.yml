# auto-generated by grc.converter

id: capture_tools_file_sink_on_tag
label: file_sink_on_tag
category: '[capture_tools]'

parameters:
-   id: file
    label: File
    dtype: file_save
-   id: type
    label: Input Type
    dtype: enum
    options: [complex, float, int, short, byte]
    option_attributes:
        size: [gr.sizeof_gr_complex, gr.sizeof_float, gr.sizeof_int, gr.sizeof_short,
            gr.sizeof_char]
    hide: part
-   id: vlen
    label: Vec Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: unbuffered
    label: Unbuffered
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['Off', 'On']
-   id: metadata_enabled
    label: Enabled metadata output
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['Off', 'On']
-   id: metadata_file
    label: Metadata file
    dtype: file_save
-   id: burst_extra
    label: Add more data about bursts
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['Off', 'On']
-   id: number_to_write
    label: Number to write
    dtype: int
    default: '1000'
-   id: number_buffered
    label: Number buffered
    dtype: int
    default: '10'
-   id: tag_str
    label: Tag to look for
    dtype: string
    default: going_up

inputs:
-   domain: stream
    dtype: ${ type }
    vlen: ${ vlen }
asserts:
- ${ vlen > 0 }

templates:
    imports: import capture_tools
    make: |-
        capture_tools.file_sink_on_tag(${type.size}*${vlen}, ${file}, ${number_buffered}, ${number_to_write}, ${tag_str})
        self.${id}.set_metadata_output(${metadata_enabled}, ${metadata_file})
        self.${id}.set_burst_extra_data_output(${burst_extra})
    callbacks:
    - set_unbuffered(${unbuffered})
    - set_metadata_output(${metadata_enabled}, ${metadata_file})
    - set_burst_extra_data_output(${burst_extra})
    - open(${file})

file_format: 1
